 See Link=>http://www.tutorialsteacher.com/mvc/routing-in-mvc
 
 MVC stands for Model, View and Controller.
 MVC separates application into three components - Model, View and Controller.

Model: Model represents shape of the data and business logic. 
	   It maintains the data of the application. 
	   Model objects retrieve and store model state in a database. 
	   Model is a data and business logic.

View: View is a user interface. 
	  View display data using model to the user and also enables them to modify 
	  the data. 
	  View is a User Interface.

Controller: Controller handles the user request. 
			Typically, user interact with View, 
			which in-turn raises appropriate URL request, 
			this request will be handled by a controller. 
			The controller renders the appropriate view with the model data 
			as a response. 
		    Controller is a request handler.

See Image:
http://www.tutorialsteacher.com/Content/images/mvc/mvc-architecture.png

http://www.tutorialsteacher.com/Content/images/mvc/request-handling-in-mvc.png

As per the above figure, when the user enters a URL in the browser, 
it goes to the server and calls appropriate controller. 
Then, the Controller uses the appropriate View and Model 
and creates the response and sends it back to the user. 

App_Data folder=>  can contain application data files like LocalDB, .mdf files, 
xml files and other data related files. 
IIS will never serve files from App_Data folder. 

App_Start folder => can contain class files which will be executed 
			when the application starts. 
			Typically, these would be config files like 
			AuthConfig.cs, BundleConfig.cs, FilterConfig.cs, RouteConfig.cs etc.
			MVC 5 includes BundleConfig.cs, FilterConfig.cs and RouteConfig.cs by default. 
			
Content folder=> contains static files like css files, images and icons files.
				MVC 5 application includes bootstrap.css, bootstrap.min.css and 
				Site.css by default. 

Controllers folder =>contains class files for the controllers. 
					Controllers handles users' request and returns a response.
					MVC requires the name of all controller files to end with "Controller".

Fonts folder =>contains custom font files for our application.

Models folder =>contains model class files. 
				Typically model class includes public properties,
				which will be used by application to hold and manipulate application
				data. 
Scripts folder =>contains JavaScript or VBScript files for the application. 
				MVC 5 includes javascript files for bootstrap, jquery 1.10 and 
				modernizer by default.

Views folder=> contains html files for the application.
				Typically view file is a .cshtml file where we write html and C#
				or VB.NET code.
				Views folder includes separate folder for each controllers. 
				For example, all the .cshtml files, which will be rendered by 
				HomeController will be in View > Home folder. 
				Shared folder under View folder contains all the views which will be
				shared among different controllers e.g. layout files. 

Global.asax =>allows us to write code that runs in response to application level events, 
			  such as Application_BeginRequest, application_start, application_error, 
			  session_start, session_end etc. 

Packages.config file=> is managed by NuGet to keep track of what packages 
						and versions we have installed in the application.
						
Web.config file => contains application level configurations. 

Routing
=======

=>ASP.NET introduced Routing to eliminate needs of mapping each URL with a physical file.
=>Routing enable us to define URL pattern that maps to the request handler. 
=> In ASP.NET Webform application, request handler is .aspx file and in MVC, it is Controller class and Action method.
=>http://domain/students can be mapped to http://domain/studentsinfo.aspx in ASP.NET Webforms 
=>And the same URL can be mapped to Student Controller and Index action method in MVC. 

Route
=====
=>Route defines the URL pattern and handler information. 
=>Every MVC application must configure (register) at least one route, 
  which is configured by MVC framework by default. 
=>We can register a route in RouteConfig class, which is in RouteConfig.cs under App_Start folder.

Configure a Route
=================
http://www.tutorialsteacher.com/Content/images/mvc/routeconfig.png

=>As in the above figure,the route is configured using the MapRoute() extension method of RouteCollection, where name is "Default", url pattern is "{controller}/{action}/{id}".
=>Defaults specifies which controller, action method or value of id parameter should be used if they do not exist in the incoming request URL. 
=>The same way, we can configure other routes using MapRoute method of RouteCollection.


